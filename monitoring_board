
#include <WiFi.h>
#include <HTTPClient.h>
#include <WebServer.h> 
#include <EEPROM.h>
#include <LiquidCrystal_I2C.h>
#include "DHT.h"
#include <WiFi.h>
#include <IOXhop_FirebaseESP32.h>
#include <Arduino.h>


#define DHTPIN 5
#define DHTPIN2 18
#define DHTTYPE DHT11
#define FIREBASE_HOST "*************************"
#define FIREBASE_AUTH "**************************"
 
String USER_ID = "*******************************";
int lcdColumns = 16;
int lcdRows = 2;
 int AnalogValue;
 const int lrd =35 ;
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);


DHT dht(DHTPIN, DHTTYPE);
DHT dht2(DHTPIN2, DHTTYPE);
int msensor = 34;
int msensor2 = 32;
float msvalue = 0;
float msvalue2 = 0;
int i = 0;
int statusCode;
const char* ssid = "text";
const char* passphrase = "text";
String st;
String content;
bool testWifi(void);
void launchWeb(void);
void setupAP(void);

WebServer server(80);

void setup()
{   

 pinMode(msensor, INPUT);
 pinMode(lrd,INPUT);
  pinMode(2, OUTPUT);
  lcd.init();                   
  lcd.backlight();
  dht.begin();
  dht2.begin();
  Serial.begin(115200); //Initialising if(DEBUG)Serial Monitor
  Serial.println();
  Serial.println("Disconnecting previously connected WiFi");
  WiFi.disconnect();
  EEPROM.begin(512); //Initialasing EEPROM
  delay(10);
  Serial.println();
  Serial.println();
  Serial.println("Startup");

  //---------------------------------------- Read eeprom for ssid and pass
  Serial.println("Reading EEPROM ssid");

  String esid;
  for (int i = 0; i < 32; ++i)
  {
    esid += char(EEPROM.read(i));
  }
  Serial.println();
  Serial.print("SSID: ");
  Serial.println(esid);
  Serial.println("Reading EEPROM pass");

  String epass = "";
  for (int i = 32; i < 96; ++i)
  {
    epass += char(EEPROM.read(i));
  }
  Serial.print("PASS: ");
  Serial.println(epass);


  WiFi.begin(esid.c_str(), epass.c_str());
  if (testWifi())
  {
    Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);

    Serial.println("Succesfully Connected!!!");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Succesfully");
    lcd.setCursor(0, 1);
    lcd.print("Connected!!!");
    delay(5000);
    digitalWrite(2,HIGH);
    return;
  }
  else
  {
    Serial.println("Turning the HotSpot On");
    launchWeb();
    setupAP();// Setup HotSpot
  }

  Serial.println();
  Serial.println("Waiting.");

  while ((WiFi.status() != WL_CONNECTED))
  {
    Serial.print(".");
    delay(100);
    server.handleClient();
  }


}
void loop() {
  if ((WiFi.status() == WL_CONNECTED))
  {




  
   // msvalue = (analogRead(msensor));
  //  msvalue = map(msvalue, 0, 4092, 0, 100);
    msvalue = (analogRead(msensor))/4;
    msvalue = map(msvalue, 1030, 180, 0, 100);
    msvalue2 = (analogRead(msensor2))/4;
    msvalue2 = map(msvalue2, 1030, 180, 0, 100);

    float h = dht.readHumidity();
    float t = dht.readTemperature();
    float f = dht.readTemperature(true);
    float hif = dht.computeHeatIndex(f, h);
    float hic = dht.computeHeatIndex(t, h, false);

    
    float h2 = dht2.readHumidity();
    float t2 = dht2.readTemperature();
    float f2 = dht2.readTemperature(true);
    float hif2 = dht2.computeHeatIndex(f2, h2);
    float hic2 = dht2.computeHeatIndex(t2, h2, false);
 
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("HM:");
    lcd.setCursor(3, 0);
    lcd.print(h);
    lcd.setCursor(7, 0);
    lcd.print(" ");
   
    lcd.setCursor(8, 0);
    lcd.print("TP: ");
    lcd.setCursor(11, 0);
    lcd.print(t);
        
    lcd.setCursor(0, 1);
    lcd.print("HI: ");
    lcd.setCursor(3, 1);
    lcd.print(hic);
    lcd.setCursor(7, 1);
    lcd.print(" ");
    
    lcd.setCursor(8, 1);
    lcd.print("SM: ");
    lcd.setCursor(11, 1);
    lcd.print(msvalue);

    Firebase.setFloat("Users/"+USER_ID+"/monitoring/temperature", t);
    Firebase.setFloat("Users/"+USER_ID+"/monitoring/humidity", h);
    Firebase.setFloat("Users/"+USER_ID+"/monitoring/heat", hic);
    Firebase.setFloat("Users/"+USER_ID+"/monitoring2/temperature", t2);
    Firebase.setFloat("Users/"+USER_ID+"/monitoring2/humidity", h2);
    Firebase.setFloat("Users/"+USER_ID+"/monitoring2/heat", hic2);
    Firebase.setFloat("Users/"+USER_ID+"/monitoring/soil", msvalue );
     Firebase.setFloat("Users/"+USER_ID+"/monitoring2/soil2", msvalue2 );

     AnalogValue = (analogRead(lrd));
  Serial.println(AnalogValue);

  if(AnalogValue>=1000){
    Firebase.setString("Users/"+USER_ID+"/control/lights/automatic", "ON");
  }else{
    Firebase.setString("Users/"+USER_ID+"/control/lights/automatic", "OFF");
  }

  }else{

      Serial.println("Wrong Credential! Please send ON/OFF");

    }

  

  

}


//----------------------------------------------- Fuctions used for WiFi credentials saving and connecting to it which you do not need to change
bool testWifi(void)
{
  int c = 0;
  Serial.println("Waiting for Wifi to connect");
  lcd.setCursor(0, 0);
  lcd.print("Waiting for Wifi to connect");
  while ( c < 20 ) {
    if (WiFi.status() == WL_CONNECTED)
    {
      return true;
    }
    digitalWrite(2,HIGH);
    delay(1000);
    digitalWrite(2,LOW);
    delay(1000);
    Serial.print("*");
    c++;
  }
  Serial.println("");
  Serial.println("Connect timed out, opening AP");
  return false;
}

void launchWeb()
{
  Serial.println("");
  if (WiFi.status() == WL_CONNECTED)
    Serial.println("WiFi connected");
    Serial.print("Local IP: ");
    Serial.println(WiFi.localIP());
    Serial.print("SoftAP IP: ");
    Serial.println(WiFi.softAPIP());
    createWebServer();
  // Start the server
    server.begin();
    Serial.println("Server started");
}

void setupAP(void)
{
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  int n = WiFi.scanNetworks();
  Serial.println("scan done");
  if (n == 0)
    Serial.println("no networks found");
  else
  {
    Serial.print(n);
    Serial.println(" networks found");
    for (int i = 0; i < n; ++i)
    {
      // Print SSID and RSSI for each network found
      Serial.print(i + 1);
      Serial.print(": ");
      Serial.print(WiFi.SSID(i));
      Serial.print(" (");
      Serial.print(WiFi.RSSI(i));
      Serial.print(")");
      //Serial.println((WiFi.encryptionType(i) == ENC_TYPE_NONE) ? " " : "*");
      delay(10);
    }
  }
  Serial.println("");
  st = "<ol>";
  for (int i = 0; i < n; ++i)
  {
    // Print SSID and RSSI for each network found
    st += "<li>";
    st += WiFi.SSID(i);
    st += " (";
    st += WiFi.RSSI(i);

    st += ")";
    // st += (WiFi.encryptionType(i) == ENC_TYPE_NONE) ? " " : "*";
    st += "</li>";
  }
  st += "</ol>";
  delay(100);
  WiFi.softAP("Smart GreenHouse Capstone", "");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Smart GreenHouse");
  lcd.setCursor(1, 5);
  lcd.print("Capstone");
  Serial.println("softap");
  launchWeb();
  Serial.println("over");
}

void createWebServer()
 
  {
    server.on("/", []() {

      IPAddress ip = WiFi.softAPIP();
      String ipStr = String(ip[0]) + '.' + String(ip[1]) + '.' + String(ip[2]) + '.' + String(ip[3]);


content = "<!DOCTYPE html>";
content += "<head>";
content += "<title>Smart Configuration</title>";    
content += "<style>";    
content += "input[type=text] {";       
content += "width: 100%;";          
content += "padding: 12px 20px;";          
content += "margin: 8px 0;";          
content += "display: inline-block;";          
content += "border: 1px solid #ccc;";          
content += "border-radius: 4px;";          
content += "box-sizing: border-box;";          
content += "font-size: 1rem;}";          
        
content += "input[type=submit] {";        
content += "width: 60%;";          
content += "background-color: #4CAF50;";          
content += "color: white;";          
content += "padding: 14px 10px;";          
content += "margin-top: 30px;";          
content += "margin-left: 2em;";          
content += "border: none;";          
content += "border-radius: 4px;";          
content += "font-size: 2rem;}";                   
        
content += "div {";        
content += "margin: 7em 20em 0 17em;";          
content += "width: 30vw;";          
content += "height: 15vh;";          
content += "border-radius: 5px;";          
content += "background-color: #f2f2f2;";          
content += "padding: 80px;}";          
content += "label{";        
content += "font-size: 1.5rem;}";            
content += "h3{";        
content += "font-size: 3em;";            
content += "margin-left: 5.6em;";
content += "margin-top: 7.6em;}";            
content += "</style>";        
content += "</head>";
content += "<body>";
content += "<h3>Smart GreenHouse</h3>";    

content += "<div>"; 
content += "<form method='get' action='setting'>";  
content += "<label>SSID</label><br>";    
content += "<input type='text' name='ssid' placeholder='Your SSSID' length='32'><br>";    

content += "<label>Password</label><br>";    
content += "<input type='text' name='pass' placeholder='Your Password' length='64'><br>";    
content += "<input type='submit' value='Connect'>";    
content += "</form>";  
content += "</div>";
content += "</body>";
content += "</html>";


      server.send(200, "text/html", content);
    });
    server.on("/scan", []() {
      //setupAP();
      IPAddress ip = WiFi.softAPIP();
      String ipStr = String(ip[0]) + '.' + String(ip[1]) + '.' + String(ip[2]) + '.' + String(ip[3]);

      content = "<!DOCTYPE HTML>\r\n<html>go back";
      server.send(200, "text/html", content);
    });

    server.on("/setting", []() {
      String qsid = server.arg("ssid");
      String qpass = server.arg("pass");
      if (qsid.length() > 0 && qpass.length() > 0) {
        Serial.println("clearing eeprom");
        for (int i = 0; i < 96; ++i) {
          EEPROM.write(i, 0);
        }
        Serial.println(qsid);
        Serial.println("");
        Serial.println(qpass);
        Serial.println("");

        Serial.println("writing eeprom ssid:");
        for (int i = 0; i < qsid.length(); ++i)
        {
          EEPROM.write(i, qsid[i]);
          Serial.print("Wrote: ");
          Serial.println(qsid[i]);
        }
        Serial.println("writing eeprom pass:");
        for (int i = 0; i < qpass.length(); ++i)
        {
          EEPROM.write(32 + i, qpass[i]);
          Serial.print("Wrote: ");
          Serial.println(qpass[i]);
        }
        EEPROM.commit();

        content = "Wifi Credential Saved Successfully to your Device.Please Reboot Your Device";
        statusCode = 200;
        // ESP.reset();
      } else {
        content = "{\"Error\":\"404 not found\"}";
        statusCode = 404;
        Serial.println("Sending 404");
      }
      server.sendHeader("Access-Control-Allow-Origin", "*");
      server.send(statusCode, "application/json", content);

    });
  }